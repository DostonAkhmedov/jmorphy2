description = 'Java port of pymorphy2'

dependencies {
    compile 'commons-io:commons-io:2.4'
    compile 'org.noggit:noggit:0.7'
    compile 'com.google.guava:guava:18.0'

    compile project(':dawg')
    testCompile 'junit:junit:4.11'
}

task benchmark(type: Test) {
    include '**/*Benchmark*'
    outputs.upToDateWhen { false }
    testLogging {
        showStandardStreams = true
    }
}

task fetch_pymorphy2_dicts() << {
    // https://pypi.python.org/packages/source/p/pymorphy2-dicts-ru/pymorphy2-dicts-ru-2.4.393658.3725883.tar.gz?md5=bdd5d23660f2ad5e8ec2721743a8b419
    String pymorphy2_dicts_version = '2.4.393658.3725883'
    String pymorphy2_dicts_package_name = 'pymorphy2-dicts-ru'
    String pymorphy2_dicts_name = "${pymorphy2_dicts_package_name}-${pymorphy2_dicts_version}"
    String pymorphy2_dicts_filename = "${pymorphy2_dicts_name}.tar.gz"
    String pymorphy2_dicts_md5sum = 'bdd5d23660f2ad5e8ec2721743a8b419'
    String pymorphy2_dicts_url = "https://pypi.python.org/packages/source/p/${pymorphy2_dicts_package_name}/${pymorphy2_dicts_filename}?md5=${pymorphy2_dicts_md5sum}"

    def resources_path = sourceSets.test.resources.getSrcDirs().iterator()[0]
    def pymorphy2_dicts_file = new File("${resources_path}/${pymorphy2_dicts_filename}")
    if (!pymorphy2_dicts_file.exists()) {
        println 'Downloading pymorphy2 dicts...'
        new URL(pymorphy2_dicts_url).withInputStream{ i -> pymorphy2_dicts_file.withOutputStream{ it << i }}
    }
    def pymorphy2_dicts_dir = new File("${resources_path}/pymorphy2_dicts")
    if (pymorphy2_dicts_dir.lastModified() < pymorphy2_dicts_file.lastModified()) {
        pymorphy2_dicts_dir.deleteDir()
    }
    if (!pymorphy2_dicts_dir.exists()) {
        println 'Unpacking pymorphy2 dicts...'
        pymorphy2_dicts_dir.mkdirs()
        copy {
            from tarTree(resources.gzip(pymorphy2_dicts_file))
            into pymorphy2_dicts_dir
            includeEmptyDirs = false
            eachFile { FileCopyDetails fcp ->
               String zip_root_path = "${pymorphy2_dicts_name}/pymorphy2_dicts_ru/data/"
               Integer strip_segments = zip_root_path.length() - zip_root_path.replace('/', '').length()
               if (fcp.relativePath.pathString.startsWith(zip_root_path)) {
                   fcp.relativePath = new RelativePath(
                       !fcp.file.isDirectory(),
                       fcp.relativePath.segments[strip_segments..-1] as String[]
                   )
               }
               else {
                   fcp.exclude()
               }
            }
        }
    }
}

processTestResources.dependsOn fetch_pymorphy2_dicts
