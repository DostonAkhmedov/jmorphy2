description = 'Jmorphy2 plugin for ElasticSearch'

ext {
    elasticsearchVersion = project.hasProperty('esVersion') ? project.getProperty('esVersion') : elasticsearchVersion
  
    pluginName = 'analysis-jmorphy2'
    pluginClassname = 'net.uaprom.jmorphy2.elasticsearch.plugin.AnalysisJmorphy2Plugin'
    pluginMetadataFilename = 'plugin-descriptor.properties'
    dependenciesDir = "${buildDir}/dependencies"
}

dependencies {
    compile project(':jmorphy2-lucene')
    compile "org.elasticsearch:elasticsearch:$elasticsearchVersion"

    testCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
    }
    testCompile("org.apache.lucene:lucene-test-framework:$luceneVersion") {
        exclude module: 'junit'
    }
    testCompile "org.elasticsearch:elasticsearch:$elasticsearchVersion:tests"
    testCompile('org.hamcrest:hamcrest-all:1.3') {
        exclude module: 'hamcrest-core'
    }
    testCompile('com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.1.16') {
        exclude module: 'junit'
    }
}

processTestResources << {
    // prevent jar hell exception
    mkdir "${buildDir}/resources/main"
    
    copy {
        from "${project(':jmorphy2-core').sourceSets['test'].output.resourcesDir}/pymorphy2_dicts"
        into "${sourceSets['test'].output.resourcesDir}/indices/analyze/config/jmorphy2/ru/pymorphy2_dicts"
    }
}

task copyDependencies(type: Copy) {
    from configurations.runtime
    into dependenciesDir
    include 'dawg-*.jar', 'jmorphy2-core-*.jar', 'jmorphy2-nlp-*.jar', 'jmorphy2-lucene-*.jar', 'noggit-*.jar', 'commons-io-*.jar', 'commons-codec-*.jar'
}

task processPluginMetadata << {
    def pluginMetadataFile = new File("${buildDir}/${pluginMetadataFilename}")
    pluginMetadataFile.text = """
name=${pluginName}
description=${project.description}
version=${project.version}
classname=${pluginClassname}
site=false
jvm=true
java.version=${sourceCompatibility}
elasticsearch.version=${elasticsearchVersion}
"""
}
processPluginMetadata.outputs.upToDateWhen { false }

task buildZip(type: Zip) {
    from jar
    from dependenciesDir
    from "${buildDir}/${pluginMetadataFilename}"
}

build.dependsOn buildZip
buildZip.dependsOn copyDependencies
buildZip.dependsOn processPluginMetadata
